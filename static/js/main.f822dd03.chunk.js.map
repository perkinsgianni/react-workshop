{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","onClick","value","Board","i","_this","this","squares","renderSquare","React","Component","Game","_this2","Object","_Users_gianniperkins_Desktop_Projects_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","_Users_gianniperkins_Desktop_Projects_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","_Users_gianniperkins_Desktop_Projects_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","_this3","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","_lines$i","_Users_gianniperkins_Desktop_Projects_my_app_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f822dd03.chunk.js","sourcesContent":["// import libraries, packages, files\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n// square component renders a single button (function component)\nfunction Square(props) {\n  return (\n    // fill square with \"X,\" re-render its value when clicked\n    <button className=\"square\" onClick={props.onClick}>\n      {/* display value in square */}\n      {props.value}\n    </button>\n  );\n}\n  \n// board component renders 9 squares\nclass Board extends React.Component {\n  // pass value and onClick props to square\n  renderSquare(i) {\n    return ( \n      <Square \n      // inform each square about its current value ('X', 'O', or null)\n      value={this.props.squares[i]} \n      onClick={() => this.props.onClick(i)}\n      />\n    );\n  }\n\n  // display value\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\n// game component renders board with placeholder values\nclass Game extends React.Component {\n  // initialize state\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      // indicate which step we're currently viewing\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  // re-render square components (controlled components)\n  handleClick(i) {\n    // proceed from new point after \"going back in time\"\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    // slice method yields copy of squares arr after every move\n    const squares = current.squares.slice();\n    // return early by ignoring a click if someone has won or if square is already filled\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    // alternate values of xIsNext\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  // update stepNumber, set xIsNext to true if even\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2 ) === 0,\n    });\n  }\n\n  // use most recent history entry to determine and display game’s status\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    // map history of moves to elements representing buttons on screen, display list of buttons to “jump” to past moves\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Go to move #' + move :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board \n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n  \n  // ========================================\n  \nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// check for winner and return 'X', 'O', or null as appropriate\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n      }\n  }\n  return null;\n}\n  \n  "],"sourceRoot":""}